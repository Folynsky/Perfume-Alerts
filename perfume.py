import requests
import time
from tqdm import tqdm
from dotenv import load_dotenv
import os

# Cargar variables desde el archivo .env
load_dotenv()

# URL del producto desde el archivo .env
URL = os.getenv("URL")

# Configuraci√≥n de Telegram desde el archivo .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

def enviar_telegram(mensaje):
    """Env√≠a un mensaje a Telegram y espera hasta que se confirme el env√≠o."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    params = {"chat_id": CHAT_ID, "text": mensaje}  # Usamos params para enviar el mensaje
    try:
        response = requests.post(url, data=params)  # Usamos POST con data
        response.raise_for_status()  # Lanza una excepci√≥n si el c√≥digo de estado no es 200
        print("üì© Mensaje enviado a Telegram")
        return True  # Confirmamos que el mensaje se envi√≥ correctamente
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è Error al enviar mensaje a Telegram: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"Respuesta del servidor: {e.response.text}")
        return False  # Indicamos que hubo un error

def verificar_disponibilidad():
    """Verifica si el producto est√° disponible y espera a que se env√≠e el mensaje a Telegram."""
    try:
        response = requests.get(URL)
        print(f"Respuesta del servidor: {response.status_code}")
        if response.status_code == 404:
            print("‚ùå Producto NO disponible")
        elif response.status_code == 200:
            print("‚úÖ Producto DISPONIBLE")
            mensaje_enviado = False
            while not mensaje_enviado:
                # Intentar enviar el mensaje y esperar que se env√≠e correctamente
                mensaje_enviado = enviar_telegram(f"üî• ¬°El producto est√° disponible! Compra aqu√≠: {URL}")
                if not mensaje_enviado:
                    print("‚ö†Ô∏è El mensaje no se envi√≥ correctamente, reintentando...")
            print("‚úÖ Notificaci√≥n enviada correctamente")
        else:
            print(f"‚ö†Ô∏è Estado inesperado: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al verificar disponibilidad: {e}")

# Bucle infinito con cuenta regresiva de 2 minutos
while True:
    try:
        verificar_disponibilidad()
        print("üîÑ Verificando nuevamente en 2 minutos...\n")

        # Barra de progreso para la cuenta regresiva
        for _ in tqdm(range(120), desc="‚è≥ Esperando", unit="s"):  # 120 segundos = 2 minutos
            time.sleep(1)  # Espera 1 segundo antes de continuar con la siguiente verificaci√≥n
    except Exception as e:
        print(f"‚ö†Ô∏è Error en el bucle principal: {e}")
